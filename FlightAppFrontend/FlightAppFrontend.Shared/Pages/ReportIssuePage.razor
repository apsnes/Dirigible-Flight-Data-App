@page "/report-issue"
@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using FlightAppLibrary.Models.Enums
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject TokenStateService TokenStateService
@inject NavigationManager NavigationManager

<PageTitle>Report an Issue</PageTitle>

<ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError"/>

<SuccessMessage Message="@SuccessMessage" OnDeleteNotification="ResetSuccessMessage"/>

<div class="mt-5">
    <ReportForm OnSubmit="SubmitReport" OnCancel="GoHome" Label="Please Provide Details" />
</div>


@code{
    private UserDTO? CurrentUser { get; set; }

    private string? ErrorMessage;
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await TokenStateService.UpdateHeaders(client);
            var userResponse = await client.GetValueAsync<UserDTO>("Account/GetUserDetails");

            if (userResponse.Value is UserDTO currentUser)
            {
                CurrentUser = currentUser;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task SubmitReport(string reportContent)
    {
        try
        {
            if (CurrentUser != null)
            {
                NotificationDto notificationDto = new()
                    {
                        NotificationType = NotificationType.Issue,
                        TargetId = CurrentUser.Id!,
                        SenderId = CurrentUser.Id!,
                        Content = reportContent,
                        TimeStamp = DateTime.UtcNow,
                        IsRead = false
                    };

                var client = ClientFactory.CreateClient("DirigibleApi");
                await TokenStateService.UpdateHeaders(client);
                var json = JsonSerializer.Serialize(notificationDto);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                var response = await client.PostAsync("Notifications", content);

                if (response.IsSuccessStatusCode)
                {
                    SuccessMessage = "Submitted successfully";
                }
                else
                {
                    ErrorMessage = "Could not submit report";
                }
            }
            else
            {
                ErrorMessage = "Could not validate user information";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void ResetError()
    {
        ErrorMessage = "";
    }

    private void ResetSuccessMessage()
    {
        SuccessMessage = "";
    }
}