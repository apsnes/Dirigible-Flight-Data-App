
﻿@using FlightAppFrontend.Shared.Auth

﻿@using FlightAppFrontend.Shared.Components.Utility

@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using FlightAppLibrary.Models.Enums
@using FlightAppLibrary.Models.Response
@inject IHttpClientFactory ClientFactory
@inject TokenStateService tokenStateService

<div class="card">
    <header class="card-header is-clickable mt-5" @onclick="ToggleCard" style="cursor: pointer">
        <p class="card-header-title">Flight Comments</p>
        <button class="card-header-icon" aria-label="more options">
            @if (IsCardOpen)
            {
                <span class="icon"><i class="fas fa-angle-up" aria-hidden="true"></i></span>
            }
            else
            {
                <span class="icon"><i class="fas fa-angle-down" aria-hidden="true"></i></span>
            }
        </button>
    </header>

    @if (IsCardOpen)
    {

        <div class="card-content pt-0">
            <NoteSortSelect OnSelectSort="SortNotes"/>
            <AddNoteCard FlightResponse="FlightResponse" CurrentUser="CurrentUser" OnNoteAdded="HandleNotesChanged" />
            <div class="media">
                <div class="media-content">
                    @foreach (var note in Notes)
                    {
                        <IndividualNoteCard Note="note" CurrentUser="CurrentUser" OnNoteDeleted="HandleNoteDeleted"/>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public List<NoteDto> Notes { get; set; }
    [Parameter] public FlightResponse FlightResponse { get; set; }
    public UserDTO CurrentUser { get; set; }
    private bool IsCardOpen = false;

    private void ToggleCard()
    {
        IsCardOpen = !IsCardOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("DirigibleApi");
        await tokenStateService.UpdateHeaders(client);
        var userResponse = await client.GetValueAsync<UserDTO>("Account/GetUserDetails");
        CurrentUser = userResponse.Value;
    }

    private void HandleNotesChanged(NoteDto note)
    {
        if (note.User!.DisplayName == null) note.User.DisplayName = note.User.FirstName;
        Notes.Add(note);
    }

    private void HandleNoteDeleted(NoteDto note)
    {
        Notes.Remove(note);
    }

    public async void SortNotes(SortType sortType)
    {
        if(sortType == SortType.Newest)
        {
            Notes = Notes.OrderByDescending(n => n.TimeStamp).ToList();
            await InvokeAsync(StateHasChanged);
        }
        else if(sortType == SortType.Oldest)
        {
            Notes = Notes.OrderBy(n => n.TimeStamp).ToList();
            await InvokeAsync(StateHasChanged);
        }
        else if(sortType == SortType.Rating)
        {
            Notes = Notes.OrderByDescending(n => n.Karma).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }
}
