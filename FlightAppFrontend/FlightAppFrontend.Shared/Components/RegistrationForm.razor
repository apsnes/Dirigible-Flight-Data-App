@using System.ComponentModel.DataAnnotations
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Services
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IHttpClientFactory DirigibleApi
@inject IJsInteropService JsInteropService

@if (Loading)
{
    <Loading/>
}
else
{
    <div class="container">
        <div class="columns is-centered">
            <div class="column is-one-third is-offset-one-third">

                <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError"/>

                <Title Text="Register"/>

                <EditForm FormName="loginForm" Model="RegistrationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" aria-label="Registration Form">
                    <DataAnnotationsValidator />
                    <div class="field">
                        <label for="firstname" class="label has-text-light">First Name</label>
                        <div class="control mt-2">
                            <InputText id="firstname" class="input is-warning" @bind-Value="RegistrationModel.FirstName" placeholder="First Name" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel.FirstName)" />
                        </div>
                    </div>
                    <div class="field">
                        <label for="lastname" class="label  has-text-light">Last Name</label>
                        <div class="control mt-2">
                            <InputText id="lastname" class="input is-warning" @bind-Value="RegistrationModel.LastName" placeholder="Last Name" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel.LastName)" />
                        </div>
                    </div>
                    <div class="field">
                        <label for="phonenumber" class="label has-text-light">Phone Number</label>
                        <div class="control mt-2">
                            <InputText id="phonenumber" class="input is-warning" @bind-Value="RegistrationModel.PhoneNumber" placeholder="Phone Number" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel.PhoneNumber)" />
                        </div>
                    </div>
                    <div class="field">
                        <label for="email" class="label has-text-light">Email</label>
                        <div class="control mt-2">
                            <InputText id="email" class="input is-warning" @bind-Value="RegistrationModel.Email" placeholder="Email" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel.Email)" />
                        </div>
                    </div>

                    <div class="field">
                        <label for="password" class="label has-text-light">Password</label>
                        <div class="control mt-2">
                            <InputText type="password" id="password" class="input is-warning" @bind-Value="RegistrationModel.Password" placeholder="Password" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel!.Password)" />
                        </div>
                    </div>

                    <div class="field">
                        <label for="confirmPassword" class="label has-text-light">Confirm Password</label>
                        <div class="control mt-2">
                            <InputText type="password" id="confirmPassword" class="input is-warning" @bind-Value="RegistrationModel.ConfirmPassword" placeholder="Confirm Password" />
                            <ValidationMessage class="help is-danger" For="@(() => RegistrationModel!.ConfirmPassword)" />
                        </div>
                    </div>

                    <button type="submit" class="button is-warning mt-2">Register</button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private string? Username { get; set; }
    private string? Email { get; set; }
    private string? Password { get; set; }
    private string? ConfirmPassword { get; set; }
    private SignUpRequestDTO RegistrationModel = new();
    private string? ErrorMessage;
    private bool Loading;

    private async Task HandleValidSubmit()
    {
        Loading = true;
        var client = DirigibleApi.CreateClient("DirigibleApi");
        var content = new StringContent(JsonSerializer.Serialize(RegistrationModel), Encoding.UTF8, "application/json");
        var result = await client.PostAsync("Account/SignUp", content);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login?registered=true");
        }
        else
        {
            Loading = false;
            ErrorMessage = "Registration failed";
        }
    }
    private void HandleInvalidSubmit()
    {
        Loading = false;
        ErrorMessage = "Registration failed";
    }
    
    private void ResetError()
    {
        ErrorMessage = "";
    }
}
