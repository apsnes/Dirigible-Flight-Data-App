@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@using FlightAppLibrary.Models.Response
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<div class="card">
    <header class="card-header is-clickable pb-4 mt-5" @onclick="ToggleCard" style="cursor: pointer">
        <p class="card-header-title">Add Comment</p>
        <button class="card-header-icon" aria-label="more options">
            @if (@isCardOpen)
            {
                <span class="icon"><i class="fas fa-angle-up" aria-hidden="true"></i></span>
            }
            else
            {
                <span class="icon"><i class="fas fa-angle-down" aria-hidden="true"></i></span>
            }
        </button>
    </header>

    @if (isCardOpen)
    {
        <div class="card-content">
            <div class="media">
                <div class="media-content">
                    <EditForm FormName="AddNote" Model="@NoteDto" OnValidSubmit="HandleValidSubmit">
                        <InputText class="input" @bind-Value="NoteDto.NoteText" placeholder="Comment text" />
                        <MainButton Text="Add Comment" />
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public FlightResponse FlightResponse { get; set; }
    public NoteDto NoteDto { get; set; } = new();
    private bool isCardOpen = false;

    private void ToggleCard()
    {
        isCardOpen = !isCardOpen;
    }

    public async Task HandleValidSubmit()
    {       
        var client = ClientFactory.CreateClient("DirigibleApi");
        var userResponse = await client.GetValueAsync<UserDTO>("Account/GetUserDetails");
        var currUser = userResponse.Value;

        NoteDto.UserId = currUser!.Id;
        NoteDto.ScheduledDeparture = FlightResponse.Departure.Scheduled;
        NoteDto.FlightIata = FlightResponse.Flight.Iata;
        NoteDto.TimeStamp = DateTime.UtcNow;

        var json = JsonSerializer.Serialize(NoteDto);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("notes", content);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }
}
