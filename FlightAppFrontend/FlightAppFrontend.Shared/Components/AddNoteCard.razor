@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@using FlightAppLibrary.Models.Response
@inject IHttpClientFactory ClientFactory

<div class="card-content">
    <div class="media">
        <div class="media-content">
            <EditForm FormName="AddNote" Model="@NoteDto" OnValidSubmit="HandleValidSubmit">
                <div style="display: flex; gap: 10px; align-items: center;">
                    <InputText class="input" @bind-Value="NoteDto.NoteText" placeholder="Comment text" />
                    <div><MainButton Text="Add Comment" /></div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter] public FlightResponse FlightResponse { get; set; }
    [Parameter] public EventCallback<NoteDto> OnNoteAdded { get; set; }
    public NoteDto NoteDto { get; set; } = new();
    private bool isCardOpen = false;

    private void ToggleCard()
    {
        isCardOpen = !isCardOpen;
    }

    public async Task HandleValidSubmit()
    {       
        var client = ClientFactory.CreateClient("DirigibleApi");
        var userResponse = await client.GetValueAsync<UserDTO>("Account/GetUserDetails");
        var currUser = userResponse.Value;

        NoteDto.UserId = currUser!.Id;
        NoteDto.ScheduledDeparture = FlightResponse.Departure.Scheduled;
        NoteDto.FlightIata = FlightResponse.Flight.Iata;
        NoteDto.TimeStamp = DateTime.UtcNow;
        NoteDto.User = currUser;
        NoteDto.Replies = new();

        var json = JsonSerializer.Serialize(NoteDto);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("notes", content);

        if (response.IsSuccessStatusCode)
        {
            await OnNoteAdded.InvokeAsync(NoteDto);
        }
    }
}
