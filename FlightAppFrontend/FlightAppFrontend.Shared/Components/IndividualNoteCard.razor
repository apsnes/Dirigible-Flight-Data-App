@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@using FlightAppLibrary.Models.Enums
@inject IHttpClientFactory ClientFactory

<div class="card">
    <header class="card-header is-clickable pb-4 mt-5" @onclick="ToggleCard" style="cursor: pointer">
        <div class="card-header-title is-size-6 is-flex is-flex-direction-column is-align-items-flex-start">
            <span class="has-text-weight-bold">@Note.User!.DisplayName</span>
            <span class="is-size-7 has-text-weight-normal">@Note.TimeStamp.ToString()</span>
            <span>@Note.NoteText</span>
        </div>
        <button class="card-header-icon" aria-label="more options">
            @if (@isCardOpen)
            {
                <span class="icon"><i class="fas fa-angle-up" aria-hidden="true"></i></span>
            }
            else
            {
                <span class="icon"><i class="fas fa-angle-down" aria-hidden="true"></i></span>
            }
        </button>
    </header>

    @if (isCardOpen)
    {
        @foreach (var reply in Note.Replies!)
        {
            <div class="media">
                <div class="media-content ml-5">
                    <div style="display: inline-block">
                        @* User pfofile picture here? *@
                        <p class=" is-size-6 ml-5"><strong>@reply.User!.DisplayName</strong></p>
                    </div>
                    <p class="is-size-7 ml-5">@reply.TimeStamp.ToString()</p>
                    <p class="is-size-6 ml-5">@reply.ReplyText</p>
                </div>
            </div>
        }
        <AddReplyCard Note="Note" OnReplyAdded="HandleReplyAdded" />
    }
</div>

@code
{
    [Parameter] public NoteDto Note { get; set; }
    private bool isCardOpen = false;
    private string IsColour = "is-warning";

    private void ToggleCard()
    {
        isCardOpen = !isCardOpen;
    }

    private void HandleReplyAdded(ReplyDto replyDto)
    {
        if (replyDto.User.DisplayName == null) replyDto.User.DisplayName = replyDto.User.FirstName;
        Note.Replies!.Add(replyDto);
    }

    public async Task UpVote()
    {
        var client = ClientFactory.CreateClient("DirigibleApi");

        var vote = new VoteDto()
            {
                Value = 1,
                CommenterId = Note.UserId,
                CommentId = Note.NoteId,
                CommentType = CommentType.Note
            };

        var json = JsonSerializer.Serialize(vote);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("votes", content);

        if (response.IsSuccessStatusCode)
        {
            IsColour = "is-success";
        }
    }
}
