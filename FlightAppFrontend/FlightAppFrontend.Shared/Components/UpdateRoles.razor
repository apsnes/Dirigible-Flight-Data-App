@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Services
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory DirigibleApi
@inject IJsInteropService JsInteropService

<div class="card mb-5 pb-4">
    <EditForm FormName="RolesForm" Model="roleModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" aria-label="Roles Form">
        <DataAnnotationsValidator />
        <div class="card-content">
            <div class="media">
                <div class="media-left">
                    <figure class="image is-128x128 is-square">
                        <img class="is-rounded" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Color_icon_blue.svg/1200px-Color_icon_blue.svg.png" alt="user-avatar" />
                    </figure>
                </div>
                <div class="media-content">
                <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />
                    <div class="field">
                        <label for="role" class="label">Role to Toggle</label>
                        <div class="control mt-2">
                            <InputText type="text" id="role" class="input" @bind-Value="roleModel.Role" placeholder="Role" />
                            <ValidationMessage class="help is-danger" For="@(() => roleModel.Role)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <footer class="card-footer">
            <button type="submit" class="card-footer-item has-text-success">Save</button>
            <button type="button" class="card-footer-item has-text-danger" @onclick="() => Cancel()">Cancel</button>
        </footer>
    </EditForm>
</div>

@code {

    private RolesUpdateDto roleChangeModel = new RolesUpdateDto();
    private RoleModelDto roleModel = new RoleModelDto();
    private string? ErrorMessage;
    [Parameter]
    public UserDTO? AppUser { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private async void HandleValidSubmit()
    {
        var client = DirigibleApi.CreateClient("DirigibleApi");
        var response = await client.PostAsJsonAsync("Account/UpdateUserRoles", new RolesUpdateDto() { UserId = AppUser.Id, Role = roleModel.Role });
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Roles update failed");
        }
    }

    protected async void Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void HandleInvalidSubmit()
    {
        ErrorMessage = "Invalid submission";
    }
    private void ResetError()
    {
        ErrorMessage = "";
    }
}
