@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Services
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory DirigibleApi
@inject IJsInteropService JsInteropService

<div class="card mb-5 pb-4">
    <EditForm FormName="RolesForm" Model="roleChangeModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" aria-label="Roles Form">
        <DataAnnotationsValidator />
        <div class="card-content">
            <div class="media">
                <div class="media-left">
                    <figure class="image is-128x128 is-square">
                        <img class="is-rounded" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Color_icon_blue.svg/1200px-Color_icon_blue.svg.png" alt="user-avatar" />
                    </figure>
                </div>
                <div class="media-content">
                <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />
                   @*  <div class="field">
                        <label for="password" class="label">Password</label>
                        <div class="control mt-2">
                            <InputText type="password" id="password" class="input" @bind-Value="passwordChangeModel.Password" placeholder="Password" />
                            <ValidationMessage class="help is-danger" For="@(() => passwordChangeModel.Password)" />
                        </div>
                    </div> *@
                    @* <div class="field">
                        <label for="confirmPassword" class="label">Confirm Password</label>
                        <div class="control mt-2">
                            <InputText type="password" id="confirmPassword" class="input" @bind-Value="passwordChangeModel.ConfirmPassword" placeholder="Confirm Password" />
                            <ValidationMessage class="help is-danger" For="@(() => passwordChangeModel.ConfirmPassword)" />
                        </div>
                    </div> *@
                </div>
            </div>
        </div>
        <footer class="card-footer">
            <button type="submit" class="card-footer-item has-text-success">Save</button>
            <button type="button" class="card-footer-item has-text-danger" @onclick="() => Cancel()">Cancel</button>
        </footer>
    </EditForm>
</div>

@code {

    private RolesUpdateDto roleChangeModel = new RolesUpdateDto();
    private string? ErrorMessage;

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private async void HandleValidSubmit()
    {
        // var client = DirigibleApi.CreateClient("DirigibleApi");
        // var content = new StringContent(JsonSerializer.Serialize(passwordChangeModel), Encoding.UTF8, "application/json");
        // var result = await client.PutAsync("Account/UpdatePassword", content);
        // if (result.IsSuccessStatusCode)
        // {
        //     await OnUpdate.InvokeAsync();
        // }
        // else{
        //     ErrorMessage = "Password update failed";
        // }
        // passwordChangeModel.Password = "";
        // passwordChangeModel.ConfirmPassword = "";
        // StateHasChanged();
    }

    protected async void Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void HandleInvalidSubmit()
    {
        ErrorMessage = "Invalid submission";
    }
    private void ResetError()
    {
        ErrorMessage = "";
    }
}
