@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models
@using FlightAppLibrary.Models.Dtos
@using FlightAppLibrary.Models.Enums
@inject IHttpClientFactory ClientFactory
@inject TokenStateService tokenStateService

<ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError"/>

<nav class="panel is-warning">
    <p class="panel-heading has-text-centered">Activity</p>
    <p class="panel-tabs">
        <a class="has-text-white is-clickable @NotificationsActive" @onclick="()=>ActivateNotifications()">Notifications</a>
        <a class="has-text-white is-clickable @CommentsActive" @onclick="()=>ActivateComments()">Comments</a>
    </p>
    @if (!String.IsNullOrEmpty(CommentsActive))
    {
        @if (Comments == null)
        {
            <Loading />
        }
        else
        {
            <div class="panel-block is-block">
                <nav class="pagination level" role="navigation" aria-label="pagination">
                    @if(pageNumber != 1)
                    {
                        <div class="level-left">
                            <button type="button" class="pagination-previous level-item" @onclick="() => pageNumber -= 1">Previous</button>
                        </div>

                    }
                    else
                    {
                        <div class="level-left">
                            <span class="level-item"/>
                        </div>
                    }
                    @if((pageNumber * pageSize < Comments.Count))
                    {
                        <div class="level-right">
                            <button type="button" class="pagination-next level-item" @onclick="() => pageNumber += 1">Next</button>
                        </div>
                    }
                </nav>
            </div>

            if(Comments.Count > 0)
            {
                for (int i = ((pageNumber - 1) * pageSize); i < (pageNumber * pageSize) - 1; i++)
                {
                    <div class="box">
                        <a class="panel-block" href="@($"/FlightSummary/{Comments[i].FlightIata}")">
                            <p><strong>@Comments[i].FlightIata</strong> @Comments[i].Text @Comments[i].TimeStamp.ToString("HH:mm dd/MM/yyyy")</p>
                        </a>
                    </div>

                    if (i >= Comments.Count - 1) break;
                }
            }
        }
    }
    else if (!String.IsNullOrEmpty(NotificationsActive))
    {
        @if (Notifications == null)
        {
            <Loading />
        }
        else
        {
            <div class="panel-block is-block">
                <nav class="pagination level" role="navigation" aria-label="pagination">
                    @if (pageNumber != 1)
                    {
                        <div class="level-left">
                            <button type="button" class="pagination-previous level-item" @onclick="() => pageNumber -= 1">Previous</button>
                        </div>

                    }
                    else
                    {
                        <div class="level-left">
                            <span class="level-item" />
                        </div>
                    }
                    @if ((pageNumber * pageSize < Notifications.Count))
                    {
                        <div class="level-right">
                            <button type="button" class="pagination-next level-item" @onclick="() => pageNumber += 1">Next</button>
                        </div>
                    }
                </nav>
            </div>

            if (Notifications!.Count > 0)
            {
                for (int i = ((pageNumber - 1) * pageSize); i < (pageNumber * pageSize) - 1; i++)
                {
                    <div class="box">
                        <div>
                            @if(Notifications[i].NotificationType == NotificationType.Report)
                            {
                                <span><strong>  Report: </strong>@Notifications[i].Content</span>
                                <br />
                                <br />
                                <div>From User: @Notifications[i].SenderId</div>
                                <br />
                                <div>Against User: @Notifications[i].TargetId</div>
                                <br />
                                <div>@Notifications[i].TimeStamp.ToString("HH:mm dd/MM/yyyy")</div>
                            }
                        </div>
                        <button type="button" class="button is-danger mt-3" @onclick="() => DeleteNotification(Notifications[i])">Delete</button>
                    </div>

                    if (i >= Notifications.Count - 1) break;
                }
            }
        }
    }
</nav>

@code {
    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private string CommentsActive = "";
    private string NotificationsActive = "";

    public List<DisplayComment>? Comments { get; set; }

    public List<NotificationDto>? Notifications { get; set; }

    private int pageNumber = 1;

    private int pageSize = 5;

    private string? ErrorMessage;


    private async Task ActivateNotifications()
    {
        pageNumber = 1;
        CommentsActive = "";
        NotificationsActive = "is-active";

        if (Notifications is null)
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var reportsResponse = await client.GetValueAsync<List<NotificationDto>>("Notifications/Reports");

            Notifications = [];

            if (reportsResponse.Value is List<NotificationDto> reports)
            {
                Notifications.AddRange(reports);
            }

            Notifications = Notifications!.OrderByDescending(c => c.TimeStamp.Date).ThenByDescending(c => c.TimeStamp.TimeOfDay).ToList();
        }
    }

    private async Task ActivateComments()
    {
        pageNumber = 1;
        NotificationsActive = "";
        CommentsActive = "is-active";

        if(Comments is null)
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var notesResponse = await client.GetValueAsync<List<NoteDto>>("Notes/user");
            var repliesResponse = await client.GetValueAsync<List<ReplyDto>>("Replies/user");

            Comments = [];

            if (notesResponse.Value is List<NoteDto> notes)
            {
                Comments.AddRange(notes.Select(n => n.ToDisplayComment()));
            }
            if (repliesResponse.Value is List<ReplyDto> replies)
            {
                Comments.AddRange(replies.Select(n => n.ToDisplayComment()));
            }

            Comments = Comments.OrderByDescending(c => c.TimeStamp.Date).ThenByDescending(c => c.TimeStamp.TimeOfDay).ToList();
        }
    }

    private async void DeleteNotification(NotificationDto notification)
    {
        try
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var response = await client.DeleteAsync($"Notifications/{notification.NotificationId}");

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Could not delete notification";
            }
            else
            {
                Notifications!.Remove(notification);
                await OnUpdate.InvokeAsync();
            }
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void ResetError()
    {
        ErrorMessage = "";
    }
}