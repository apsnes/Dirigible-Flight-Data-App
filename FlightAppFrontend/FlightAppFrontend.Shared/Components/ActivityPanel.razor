@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models
@using FlightAppLibrary.Models.Dtos
@inject IHttpClientFactory ClientFactory

<nav class="panel is-warning">
    <p class="panel-heading has-text-centered">Activity</p>
    <p class="panel-tabs">
        <a class="has-text-white is-clickable @NotificationsActive" @onclick="()=>ActivateNotifications()">Notifications</a>
        <a class="has-text-white is-clickable @CommentsActive" @onclick="()=>ActivateComments()">Comments</a>
    </p>
    @if (!String.IsNullOrEmpty(CommentsActive))
    {
        @if (Comments == null)
        {
            <Loading />
        }
        else
        {
            foreach (var comment in Comments!)
            {
                <div class="box">
                    <a class="panel-block" href="@($"/FlightSummary/{comment.FlightIata}")">
                        <p><strong>@comment.FlightIata</strong> @comment.Text @comment.TimeStamp.ToString("HH:mm dd/MM/yyyy")</p>
                    </a>
                </div>
            }
        }
    }
    else if (!String.IsNullOrEmpty(NotificationsActive))
    {
        <div class="box">
            <button tyoe="button" class="panel-block">
                <p>Notification</p>
            </button>
        </div>
    }
</nav>

@code {
    private string CommentsActive = "";
    private string NotificationsActive = "";

    public List<DisplayComment>? Comments { get; set; }

    private async Task ActivateComments()
    {
        NotificationsActive = "";
        CommentsActive = "is-active";

        if(Comments is null)
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            var notesResponse = await client.GetValueAsync<List<NoteDto>>("Notes/user");
            var repliesResponse = await client.GetValueAsync<List<ReplyDto>>("Replies/user");

            Comments = [];

            if (notesResponse.Value is List<NoteDto> notes)
            {
                Comments.AddRange(notes.Select(n => n.ToDisplayComment()));
            }
            if (repliesResponse.Value is List<ReplyDto> replies)
            {
                Comments.AddRange(replies.Select(n => n.ToDisplayComment()));
            }

            Comments = Comments.OrderByDescending(c => c.TimeStamp.Date).ThenByDescending(c => c.TimeStamp.TimeOfDay).ToList();
        }
    }

    private void ActivateNotifications()
    {
        CommentsActive = "";
        NotificationsActive = "is-active";
    }
}