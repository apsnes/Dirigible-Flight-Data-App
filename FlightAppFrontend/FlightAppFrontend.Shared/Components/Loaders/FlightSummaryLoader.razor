@using FlightAppLibrary.Models.Response
@using FlightAppFrontend.Shared.Extensions
@using FlightAppFrontend.Shared.Pages
@using System.Text.Json
@inject IHttpClientFactory ClientFactory

@if(ErrorMessage != null)
{
    <p>@ErrorMessage</p>
}
else if(@FlightResponse == null)
{
    <p>Loading</p>
}
else
{
    <FlightSummary FlightResponse="@FlightResponse"/>
}

@code{
    [Parameter]
    public string? IATA { get; set; }

    protected FlightResponse? FlightResponse { get; set; }

    protected string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("DirigibleApi");

            var test = client.BaseAddress;

            var response = await client.GetValueAsync<FlightResponse>($"api/FlightApi/{IATA}");

            FlightResponse = response.Value;
            ErrorMessage = response.ErrorMessage;
        }
        catch(Exception ex)
        {

            ErrorMessage = $"An error occured: {ex.Message}";
        }
    }
}