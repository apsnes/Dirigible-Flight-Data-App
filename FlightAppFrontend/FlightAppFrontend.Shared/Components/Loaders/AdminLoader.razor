@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppFrontend.Shared.Services
@using FlightAppLibrary.Models.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IJsInteropService JsInteropService
@inject TokenStateService tokenStateService

@if (ErrorMessage != null)
{
    <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />
}
else if (@User == null)
{
    <Loading />
}
else
{
    <PageTitle>Dashboard</PageTitle>
    <div class=" container mt-6">
        <div class="columns">
            <div class="column is-half">
                <EditForm Model="email" OnValidSubmit="GetUser" aria-label="Admin Edit User Form">
                    <label for="email" class="label">Enter Email of User to Edit:</label>
                    <InputText id="email" @bind-Value="email" class="input mb-3" placeholder="Email">Email</InputText>
                    <MainButton Text="Submit"/>
                </EditForm>
            </div>
        </div>
    </div>

    @if(emailEntered){
    <div class="container mt-6">
        @if (Login)
        {
            <TitleSuccess Text="Welcome Back!" />
        }
        else if (Updated)
        {
            <TitleSuccess Text="Updated Successfully!" />
        }
        else if (Editing)
        {
            <Title Text="Edit Details" />
        }
    
        else if (UpdatingRoles)
        {
            <Title Text="Enter Role" />
        }
        else if (RolesUpdated)
        {
            <TitleSuccess Text="Role updated" />
        }
        else
        {
            <Title Text="Welcome Back!" />
        }

        <div class="columns">
            <div class="column is-half">
                @if (Editing)
                {
                    <AdminEditUserInfoForm AuthState="@_authState" AppUser="User" OnCancel="ToggleEditing" OnUpdate="SetUpdated" />
                }
            
                else if (UpdatingRoles)
                {
                    <UpdateRoles OnCancel="ToggleUpdatingRoles" AppUser="User" OnUpdate="SetRolesUpdated" />
                }
                else
                {
                    
                    <AdminProfileCard AuthState="_authState" AppUser="User" OnEdit="ToggleEditing" OnUpdateRoles ="ToggleUpdatingRoles" />
                }
            </div>
        </div>
    </div>
    }
}


@code {


    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private AuthenticationState? _authState;

    private string email = "";
    private bool emailEntered = false;

    private UserDTO User { get; set; } = new UserDTO();

    private string? ErrorMessage;

    [SupplyParameterFromQuery(Name = "login")]
    public bool Login { get; set; }

    private bool Updated;

    private bool Editing;

    private bool UpdatingRoles;
    private bool RolesUpdated;
    private RolesUpdateDto roleModel = new RolesUpdateDto();


    protected void ResetError()
    {
        ErrorMessage = "";
    }
    public async Task GetUser(){
        try
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var response = await client.GetValueAsync<UserDTO>($"Account/GetUserDetailsByEmail?email={email}");
            User = response.Value!;
            emailEntered = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    public void SetUpdated()
    {
        Updated = true;
        Editing = false;
    }

    public void ToggleEditing()
    {
        Login = false;
        Editing = !Editing;
        if (Editing) Updated = false;
    }
 
    public void SetRolesUpdated()
    {
        RolesUpdated = true;
        UpdatingRoles = false;
    }
    public void ToggleUpdatingRoles()
    {
        Login = false;
        Editing = false;
        UpdatingRoles = !UpdatingRoles;
        if (UpdatingRoles) RolesUpdated = false;
    }
}