@using System.Text.Json
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Response
@inject IHttpClientFactory ClientFactory

 @if(ErrorMessage != null) 
 { 
     <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError"/> 
 } 
 else if(@FlightResponses == null) 
 { 
     <Loading/> 
 } 
 else 
 { 
     <FlightsSummary FlightResponses="@FlightResponses"/> 
 } 

@code {
    [Parameter]
    public string? FlightIATA { get; set; }

    [Parameter]
    public string? ArrivalIATA { get; set; }

    [Parameter]
    public string? DepartureIATA { get; set; }

    public List<FlightResponse>? FlightResponses { get; set; }

    protected string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {      
            var client = ClientFactory.CreateClient("DirigibleApi");
            var response = await client.GetValueAsync<List<FlightResponse>>($"FlightApi/results?{CreateQueryString()}");

            FlightResponses = response.Value;
            ErrorMessage = response.ErrorMessage;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occured: {ex.Message}";
        }
    }

    protected string CreateQueryString()
    {
        HashSet<string> parameters = [];

        if (!String.IsNullOrEmpty(FlightIATA)) parameters.Add($"flight_iata={FlightIATA}");
        if (!String.IsNullOrEmpty(DepartureIATA)) parameters.Add($"departures={DepartureIATA}");
        if (!String.IsNullOrEmpty(ArrivalIATA)) parameters.Add($"arrivals={ArrivalIATA}");

        return String.Join("&", parameters);
    }

    protected void ResetError()
    {
        ErrorMessage = "";
    }
}