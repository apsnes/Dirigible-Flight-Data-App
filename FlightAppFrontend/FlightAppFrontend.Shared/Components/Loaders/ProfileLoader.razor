@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject TokenStateService tokenStateService

@if (ErrorMessage != null)
{
    <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />
}
else if (@User == null)
{
    <Loading />
}
else
{
    <Profile User="User"/>
}

@code{
    [Parameter]
    public string? UserId { get; set; }

    private UserDTO? User;

    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var response = await client.GetValueAsync<UserDTO>($"Account/GetUserDetailsByUserId/{UserId}");
            User = response.Value!;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected void ResetError()
    {
        ErrorMessage = "";
    }
}