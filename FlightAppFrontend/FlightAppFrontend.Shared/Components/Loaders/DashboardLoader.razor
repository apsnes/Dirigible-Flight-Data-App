@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppFrontend.Shared.Layout
@using FlightAppLibrary.Models.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject TokenService tokenService
@inject TokenStateService tokenStateService
@inject AuthenticationStateProvider customAuthenticationStateProvider

@if (ErrorMessage != null)
{
    <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />
}
else if (@User == null)
{
    <Loading />
}
else
{
    <div class="container mt-6">
        <div class="columns is-7">
            <div class="column is-half">
                @if (Login)
                {
                    <TitleSuccess Text="Welcome Back!" />
                }
                else if (Updated)
                {
                    <TitleSuccess Text="Updated Successfully!" />
                }
                else if (Editing)
                {
                    <Title Text="Edit Details" />
                }
                else if (UpdatingPassword)
                {
                    <Title Text="Enter New Password" />
                }
                else if(PasswordUpdated)
                {
                    <TitleSuccess Text="Password Updated" />
                }
                else
                {
                    <Title Text="Welcome Back!" />
                }

                @if (Editing)
                {
                    <EditUserInfoForm AppUser="User" OnCancel="ToggleEditing" OnUpdate="SetUpdated" />
                }
                else if(UpdatingPassword)
                {
                    <UpdatePassword AppUser="User" OnCancel="ToggleUpdatingPassword" OnUpdate="SetPasswordUpdated"/>
                }
                else
                {
                    <DashboardProfileCard AppUser="User" OnEdit="ToggleEditing" OnChangePassword="ToggleUpdatingPassword"/>
                }
            </div>
            <div class="column">
                <ActivityPanel/>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "login")]
    public bool Login { get; set; }

    private bool Updated;

    private bool Editing;

    private bool UpdatingPassword;

    private bool PasswordUpdated;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string email = "";

    private UserDTO? User;

    private string? ErrorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var client = ClientFactory.CreateClient("DirigibleApi");
                await tokenStateService.UpdateHeaders(client);
                var response = await client.GetValueAsync<UserDTO>("Account/GetUserDetails");
                User = response.Value!;
                StateHasChanged();

            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }
        
    }

    public void SetUpdated()
    {
        Updated = true;
        Editing = false;
    }

    public void SetPasswordUpdated()
    {
        PasswordUpdated = true;
        UpdatingPassword = false;
    }

    public void ToggleEditing()
    {
        Login = false;
        UpdatingPassword = false;
        Editing = !Editing;
        if (Editing) Updated = false;
    }

    public void ToggleUpdatingPassword()
    {
        Login = false;
        Editing = false;
        UpdatingPassword = !UpdatingPassword;
        if (UpdatingPassword) PasswordUpdated = false;
    }

    protected void ResetError()
    {
        ErrorMessage = "";
    }

}
