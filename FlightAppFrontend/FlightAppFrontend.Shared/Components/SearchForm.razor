@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppLibrary.Models

<div class="container">
    <div class="columns is-centered">
        <div class="column is-one-third is-offset-one-third">

            <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError"/>

            <Title Text="Search Flights"/>

            <EditForm FormName="SearchForm" Model="@SearchModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" aria-label="Search Form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="field">
                    <label for="iata" class="label">Flight Number</label>
                    <div class="control mt-2">
                        <InputText id="iata" class="input is-warning" @bind-Value="SearchModel!.FlightIATA" placeholder="Flight Number" />
                    </div>
                </div>

                <AutoCompleteField Dictionary="AirportDictionary" Label="Departure" OnSetValue="SetDeparture"/>

                <AutoCompleteField Dictionary="AirportDictionary" Label="Arrival" OnSetValue="SetArrival"/>

                <MainButton Text="Submit"/>
            </EditForm>
        </div>
    </div>
</div>

@code{
    public SearchModel SearchModel = new();

    public string? ErrorMessage;

    private void HandleInvalidSubmit()
    {

    }

    protected void HandleValidSubmit()
    {
        if (String.IsNullOrEmpty(SearchModel.FlightIATA) &&
                String.IsNullOrEmpty(SearchModel.DepartureIATA) &&
                    String.IsNullOrEmpty(SearchModel.ArrivalIATA)) { ErrorMessage = "Search must have at least one search term"; return; }

        NavigationManager.NavigateTo($"Results?{CreateQueryString()}");
    }

    protected string CreateQueryString() 
    {
        HashSet<string> parameters = [];

        if (!String.IsNullOrEmpty(SearchModel.FlightIATA)) parameters.Add($"flight_iata={SearchModel!.FlightIATA}");
        if (!String.IsNullOrEmpty(SearchModel.DepartureIATA)) parameters.Add($"departures={SearchModel!.DepartureIATA}");
        if (!String.IsNullOrEmpty(SearchModel.ArrivalIATA)) parameters.Add($"arrivals={SearchModel!.ArrivalIATA}");

        return String.Join("&", parameters);
    }

    private void SetDeparture(string value)
    {
        if(AirportDictionary.ContainsKey(value))
        {
            SearchModel.DepartureIATA = AirportDictionary[value];
        }
    }

    private void SetArrival(string value)
    {
        SearchModel.ArrivalIATA = AirportDictionary[value];
    }

    protected void ResetError()
    {
        ErrorMessage = "";
    }

    private Dictionary<string, string> AirportDictionary = new()
    {
        {"Manchester Airport (MAN)", "MAN"},
        {"Amsterdam Airport Schiphol (AMS)", "AMS"},
        {"Liverpool John Lennon Airport (LPL)", "LPL"},
        {"London Heathrow Airport (LHR)", "LHR"}
    };
}