@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory

<div class="card-content">
    <div class="media">
        <div class="media-content">
            <EditForm FormName="AddReply" Model="@CommentText" OnValidSubmit="HandleValidSubmit">
                <div style="display: flex; gap: 10px; align-items: center;">
                    <DataAnnotationsValidator/>
                    <InputText class="input" @bind-Value="CommentText.Text" placeholder="Reply text" />
                    <ValidationMessage class="help is-danger" For="@(() => CommentText.Text)" />
                    <div><MainButton Text="Add Reply" /></div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter] public NoteDto Note { get; set; }
    [Parameter] public EventCallback<ReplyDto> OnReplyAdded { get; set; }
    [Parameter] public UserDTO CurrentUser { get; set; }
    public ReplyDto ReplyDto { get; set; } = new();
    public CommentTextDto CommentText { get; set; } = new();


    private async Task HandleValidSubmit()
    {
        var client = ClientFactory.CreateClient("DirigibleApi");
        ReplyDto.ReplyText = CommentText.Text;
        ReplyDto.UserId = CurrentUser!.Id!;
        ReplyDto.NoteId = Note.NoteId;
        ReplyDto.TimeStamp = DateTime.UtcNow;
        ReplyDto.User = CurrentUser;

        var json = JsonSerializer.Serialize(ReplyDto);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("replies", content);

        if (response.IsSuccessStatusCode)
        {
            ReplyDto = await response.Content.ReadFromJsonAsync<ReplyDto>();
            await OnReplyAdded.InvokeAsync(ReplyDto);
            ReplyDto = new ReplyDto();
        }
    }
}
