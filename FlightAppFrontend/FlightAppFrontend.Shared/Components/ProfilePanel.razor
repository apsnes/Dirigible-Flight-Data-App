@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models
@using FlightAppLibrary.Models.Dtos
@inject IHttpClientFactory ClientFactory
@inject TokenStateService tokenStateService

<nav class="panel is-warning">
    <p class="panel-heading has-text-centered">Comment History</p>

    @if (Comments == null)
    {
        <Loading />
    }
    else if(Comments.Count == 0)
    {
        <h1>Nothing to see here...</h1>
    }
    else
    {
        foreach (var comment in Comments!)
        {
            <div class="box">
                <a class="panel-block" href="@($"/FlightSummary/{comment.FlightIata}")">
                    <p><strong>@comment.FlightIata</strong> @comment.Text @comment.TimeStamp.ToString("HH:mm dd/MM/yyyy")</p>
                </a>
            </div>
        }
    }
</nav>

@code {
    [Parameter]
    public UserDTO? User { get; set; }

    public List<DisplayComment>? Comments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Comments is null)
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            await tokenStateService.UpdateHeaders(client);
            var notesResponse = await client.GetValueAsync<List<NoteDto>>($"Notes/user/{User!.Id}");
            var repliesResponse = await client.GetValueAsync<List<ReplyDto>>($"Replies/user/{User!.Id}");

            Comments = [];

            if(notesResponse.Value is List<NoteDto> notes)
            {
                Comments.AddRange(notes.Select(n => n.ToDisplayComment()));
            }
            if (repliesResponse.Value is List<ReplyDto> replies)
            {
                Comments.AddRange(replies.Select(n => n.ToDisplayComment()));
            }

            Comments = Comments.OrderByDescending(c => c.TimeStamp.Date).ThenByDescending(c => c.TimeStamp.TimeOfDay).ToList();
        }
    }
}