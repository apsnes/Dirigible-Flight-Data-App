@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Extensions
@using FlightAppLibrary.Models
@using FlightAppLibrary.Models.Dtos
@inject IHttpClientFactory ClientFactory

<nav class="panel is-warning">
    <p class="panel-heading has-text-centered">Comment History</p>

    @if (Comments == null)
    {
        <Loading />
    }
    else
    {
        <div class="panel-block is-block">
            <nav class="pagination level" role="navigation" aria-label="pagination">
                @if (pageNumber != 1)
                {
                    <div class="level-left">
                        <button type="button" class="pagination-previous level-item" @onclick="() => pageNumber -= 1">Previous</button>
                    </div>

                }
                else
                {
                    <div class="level-left">
                        <span class="level-item" />
                    </div>
                }
                @if ((pageNumber * pageSize < Comments.Count))
                {
                    <div class="level-right">
                        <button type="button" class="pagination-next level-item" @onclick="() => pageNumber += 1">Next</button>
                    </div>
                }
            </nav>
        </div>

        if(Comments.Count > 0)
        {
            for (int i = ((pageNumber - 1) * pageSize); i < (pageNumber * pageSize) - 1; i++)
            {
                <div class="box">
                    <a class="panel-block" href="@($"/FlightSummary/{Comments[i].FlightIata}")">
                        <p><strong>@Comments[i].FlightIata</strong> @Comments[i].Text @Comments[i].TimeStamp.ToString("HH:mm dd/MM/yyyy")</p>
                    </a>
                </div>

                if (i >= Comments.Count - 1) break;
            }
        }
    }
</nav>

@code {
    [Parameter]
    public UserDTO? User { get; set; }

    public List<DisplayComment>? Comments { get; set; }

    private int pageNumber = 1;

    private int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        if (Comments is null)
        {
            var client = ClientFactory.CreateClient("DirigibleApi");
            var notesResponse = await client.GetValueAsync<List<NoteDto>>($"Notes/user/{User!.Id}");
            var repliesResponse = await client.GetValueAsync<List<ReplyDto>>($"Replies/user/{User!.Id}");

            Comments = [];

            if(notesResponse.Value is List<NoteDto> notes)
            {
                Comments.AddRange(notes.Select(n => n.ToDisplayComment()));
            }
            if (repliesResponse.Value is List<ReplyDto> replies)
            {
                Comments.AddRange(replies.Select(n => n.ToDisplayComment()));
            }

            Comments = Comments.OrderByDescending(c => c.TimeStamp.Date).ThenByDescending(c => c.TimeStamp.TimeOfDay).ToList();
        }
    }
}