@using System.ComponentModel.DataAnnotations
@using FlightAppFrontend.Shared.Auth
@using FlightAppFrontend.Shared.Components.Utility
@using FlightAppFrontend.Shared.Services
@using FlightAppLibrary.Models.Dtos
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@inject IHttpClientFactory DirigibleApi
@inject IJsInteropService JsInteropService
@inject AuthenticationStateProvider customAuthenticationStateProvider
@inject TokenStateService tokenStateService
@inject NavigationManager NavigationManager;

@if(Loading)
{
    <Loading/>
}
else
{
    <div class="container">
        <div class="columns is-centered">
            <div class="column is-one-third is-offset-one-third">

                <ErrorMessage Message="@ErrorMessage" OnDeleteNotification="ResetError" />

                @if(Registered) {
                    <TitleSuccess Text="Welcome Aboard!"/>
                }
                else{
                    ﻿<Title Text="Login" />
                }

                <EditForm FormName="loginForm" Model="LoginModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" aria-label="Login Form">
                    <DataAnnotationsValidator />

                    <div class="field">
                        <label for="email" class="label has-text-light">Email</label>
                        <div class="control mt-2">
                            <InputText id="email" class="input is-warning" @bind-Value="LoginModel.UserName" placeholder="Email" />
                            <ValidationMessage class="help is-danger" For="@(() => LoginModel.UserName)"/>
                        </div>
                    </div>

                    <div class="field">
                        <label for="password" class="label has-text-light">Password</label>
                        <div class="control mt-2">
                            <InputText type="password" id="password" class="input is-warning" @bind-Value="LoginModel.Password" placeholder="Password" />
                            <ValidationMessage class="help is-danger" For="@(() => LoginModel!.Password)" />
                        </div>
                    </div>

                    <MainButton Text="Login" />
                </EditForm>
                <div class="mt-2">
                    <a class="has-text-light is-underlined" href="/Registration">Register</a>
                </div>
            </div>
        </div>
        <AuthorizeView>
            <Authorized>
                <p class="has-text-light">@($"You are logged in {name}!")</p>
            </Authorized>
            <NotAuthorized>
                <p class="has-text-light">You are not logged in.</p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "registered")]
    public bool Registered { get; set; }

    private SignInRequestDTO LoginModel = new SignInRequestDTO();
    private string firstName ="";
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string name = "";
    private string? ErrorMessage;
    private bool Loading;

    private AuthenticationState _authState;
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var authState = await authenticationStateTask;
            if (authState != null && authState.User.Identity.IsAuthenticated)
            {
                //name = authState.User.Identity.Name;
                //name = authState.User.Claims.FirstOrDefault(c => c.Type == "FirstName")?.Value;



                StateHasChanged();
            }

            else
            {
                Console.WriteLine("User is not authenticated");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        Loading = true;
        var client = DirigibleApi.CreateClient("DirigibleApi");
        var content = new StringContent(JsonSerializer.Serialize(LoginModel), Encoding.UTF8, "application/json");
        var result = await client.PostAsync("Account/SignIn", content);
        if(result.IsSuccessStatusCode){
            var data = await result.Content.ReadAsStringAsync();
            var deserializedData = JsonSerializer.Deserialize<SignInResponseDTO>(data);
            var token = deserializedData?.Token;
            if(token!=null){
                await JsInteropService.SetItem("jwtToken", token);
                if (customAuthenticationStateProvider is CustomAuthenticationStateProvider customProvider)
                {
                    tokenStateService.SetToken(token);
                    customProvider.NotifyAuthenticationStateChanged();
                }
                NavigationManager.NavigateTo("/dashboard?login=true");
            }
            else{
                Loading = false;
                ErrorMessage = "Login failed";
            }
        }
        else{
            Loading = false;
            ErrorMessage = "Login failed";
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("OnInvalidSubmit");
    }

    private void ResetError()
    {
        ErrorMessage = "";
    }
}
